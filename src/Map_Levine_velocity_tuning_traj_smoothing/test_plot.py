# Import packages.
import numpy as np
import cvxpy as cp
import time
import matplotlib.pyplot as plt
from PathTrajectory import PathTrajectory
from matplotlib.animation import FuncAnimation
from TrajectorySmoothing import TrajectorySmoothing

# instantiate car1 and car2 waypoints
#c1_pos = np.array([[ 2.66642228e+04 ,-1.39837178e+04],
# [ 2.58342479e+04 ,-1.35418190e+04],
# [ 2.50250561e+04 ,-1.31111492e+04],
# [ 2.42362549e+04 ,-1.26914933e+04],
# [ 2.34674568e+04 ,-1.22826389e+04],
# [ 2.27182791e+04 ,-1.18843766e+04],
# [ 2.19883442e+04 ,-1.14964993e+04],
# [ 2.12772792e+04 ,-1.11188030e+04],
# [ 2.05847162e+04 ,-1.07510862e+04],
# [ 1.99102919e+04 ,-1.03931501e+04],
# [ 1.92536480e+04 ,-1.00447987e+04],
# [ 1.86144308e+04 ,-9.70583828e+03],
# [ 1.79922915e+04 ,-9.37607810e+03],
# [ 1.73868857e+04, -9.05532984e+03],
# [ 1.67978740e+04, -8.74340782e+03],
# [ 1.62249213e+04, -8.44012889e+03],
# [ 1.56676972e+04, -8.14531246e+03],
# [ 1.51258760e+04, -7.85878048e+03],
# [ 1.45991364e+04, -7.58035739e+03],
# [ 1.40871616e+04, -7.30987015e+03],
# [ 1.35896392e+04, -7.04714816e+03],
# [ 1.31062614e+04, -6.79202332e+03],
# [ 1.26367246e+04, -6.54432993e+03],
# [ 1.21807298e+04, -6.30390474e+03],
# [ 1.17379821e+04, -6.07058689e+03],
# [ 1.13081911e+04, -5.84421791e+03],
# [ 1.08910706e+04, -5.62464169e+03],
# [ 1.04863385e+04, -5.41170450e+03],
# [ 1.00937172e+04, -5.20525490e+03],
# [ 9.71293307e+03, -5.00514381e+03],
# [ 9.34371667e+03, -4.81122440e+03],
# [ 8.98580269e+03, -4.62335217e+03],
# [ 8.63892992e+03, -4.44138484e+03],
# [ 8.30284115e+03, -4.26518239e+03],
# [ 7.97728326e+03, -4.09460704e+03],
# [ 7.66200706e+03, -3.92952319e+03],
# [ 7.35676734e+03, -3.76979746e+03],
# [ 7.06132283e+03, -3.61529862e+03],
# [ 6.77543614e+03, -3.46589760e+03],
# [ 6.49887374e+03, -3.32146748e+03],
# [ 6.23140593e+03, -3.18188345e+03],
# [ 5.97280682e+03, -3.04702280e+03],
# [ 5.72285427e+03, -2.91676490e+03],
# [ 5.48132991e+03, -2.79099120e+03],
# [ 5.24801903e+03, -2.66958519e+03],
# [ 5.02271062e+03, -2.55243238e+03],
# [ 4.80519731e+03, -2.43942032e+03],
# [ 4.59527534e+03, -2.33043852e+03],
# [ 4.39274451e+03, -2.22537850e+03],
# [ 4.19740819e+03, -2.12413371e+03],
# [ 4.00907324e+03, -2.02659958e+03],
# [ 3.82755002e+03, -1.93267341e+03],
# [ 3.65265235e+03, -1.84225446e+03],
# [ 3.48419745e+03, -1.75524384e+03],
# [ 3.32200592e+03, -1.67154455e+03],
# [ 3.16590175e+03, -1.59106143e+03],
# [ 3.01571223e+03, -1.51370116e+03],
# [ 2.87126794e+03, -1.43937225e+03],
# [ 2.73240274e+03, -1.36798499e+03],
# [ 2.59895371e+03, -1.29945145e+03],
# [ 2.47076112e+03, -1.23368549e+03],
# [ 2.34766841e+03, -1.17060268e+03],
# [ 2.22952217e+03, -1.11012034e+03],
# [ 2.11617208e+03, -1.05215750e+03],
# [ 2.00747089e+03, -9.96634881e+02],
# [ 1.90327438e+03, -9.43474866e+02],
# [ 1.80344138e+03, -8.92601508e+02],
# [ 1.70783364e+03, -8.43940494e+02],
# [ 1.61631589e+03, -7.97419134e+02],
# [ 1.52875577e+03, -7.52966341e+02],
# [ 1.44502380e+03, -7.10512611e+02],
# [ 1.36499334e+03, -6.69990010e+02],
# [ 1.28854058e+03, -6.31332154e+02],
# [ 1.21554448e+03, -5.94474191e+02],
# [ 1.14588678e+03, -5.59352782e+02],
# [ 1.07945192e+03, -5.25906086e+02],
# [ 1.01612706e+03, -4.94073739e+02],
# [ 9.55801976e+02, -4.63796841e+02],
# [ 8.98369116e+02, -4.35017933e+02],
# [ 8.43723502e+02, -4.07680980e+02],
# [ 7.91762727e+02, -3.81731358e+02],
# [ 7.42386914e+02, -3.57115830e+02],
# [ 6.95498693e+02, -3.33782532e+02],
# [ 6.51003160e+02, -3.11680953e+02],
# [ 6.08807852e+02, -2.90761922e+02],
# [ 5.68822711e+02, -2.70977581e+02],
# [ 5.30960056e+02, -2.52281378e+02],
# [ 4.95134548e+02, -2.34628040e+02],
# [ 4.61263160e+02, -2.17973562e+02],
# [ 4.29265148e+02, -2.02275184e+02],
# [ 3.99062013e+02, -1.87491378e+02],
# [ 3.70577476e+02, -1.73581826e+02],
# [ 3.43737440e+02, -1.60507404e+02],
# [ 3.18469966e+02, -1.48230166e+02],
# [ 2.94705233e+02, -1.36713322e+02],
# [ 2.72375513e+02, -1.25921223e+02],
# [ 2.51415136e+02, -1.15819346e+02],
# [ 2.31760459e+02, -1.06374267e+02],
# [ 2.13349835e+02, -9.75536558e+01],
# [ 1.96123580e+02, -8.93262467e+01],
# [ 1.80023943e+02, -8.16618277e+01],
# [ 1.64995073e+02, -7.45312202e+01],
# [ 1.50982989e+02, -6.79062616e+01],
# [ 1.37935545e+02, -6.17597877e+01],
# [ 1.25802403e+02, -5.60656143e+01],
# [ 1.14534998e+02, -5.07985203e+01],
# [ 1.04086507e+02, -4.59342290e+01],
# [ 9.44118181e+01, -4.14493910e+01],
# [ 8.54674987e+01, -3.73215660e+01],
# [ 7.72117632e+01, -3.35292050e+01],
# [ 6.96044416e+01, -3.00516328e+01],
# [ 6.26069485e+01, -2.68690301e+01],
# [ 5.61822505e+01, -2.39624153e+01],
# [ 5.02948354e+01, -2.13136274e+01],
# [ 4.49106799e+01, -1.89053077e+01],
# [ 3.99972182e+01, -1.67208820e+01],
# [ 3.55233107e+01, -1.47445431e+01],
# [ 3.14592117e+01, -1.29612327e+01],
# [ 2.77765382e+01, -1.13566240e+01],
# [ 2.44482383e+01, -9.91710346e+00],
# [ 2.14485591e+01, -8.62975314e+00],
# [ 1.87530156e+01, -7.48233307e+00],
# [ 1.63383586e+01, -6.46326331e+00],
# [ 1.41825436e+01, -5.56160616e+00],
# [ 1.22646985e+01, -4.76704838e+00],
# [ 1.05650923e+01, -4.06988343e+00],
# [ 9.06510356e+00, -3.46099358e+00],
# [ 7.74718860e+00, -2.93183222e+00],
# [ 6.59484982e+00, -2.47440598e+00],
# [ 5.59260413e+00, -2.08125698e+00],
# [ 4.72595131e+00, -1.74544501e+00],
# [ 3.98134231e+00, -1.46052975e+00],
# [ 3.34614766e+00, -1.22055294e+00],
# [ 2.80862579e+00, -1.02002063e+00],
# [ 2.35789141e+00, -8.53885354e-01],
# [ 1.98388383e+00, -7.17528317e-01],
# [ 1.67733535e+00, -6.06741636e-01],
# [ 1.42973961e+00, -5.17710515e-01],
# [ 1.23331991e+00, -4.46995460e-01],
# [ 1.08099762e+00, -3.91514477e-01],
# [ 9.66360469e-01, -3.48525273e-01],
# [ 8.83630970e-01, -3.15607464e-01],
# [ 8.27634725e-01, -2.90644773e-01],
# [ 7.93768797e-01, -2.71807237e-01],
# [ 7.77970065e-01, -2.57533403e-01],
# [ 7.76683577e-01, -2.46512538e-01],
# [ 7.86830904e-01, -2.37666827e-01],
# [ 8.05778497e-01, -2.30133577e-01],
# [ 8.31306041e-01, -2.23247420e-01],
# [ 8.61574807e-01, -2.16522513e-01],
# [ 8.95096013e-01, -2.09634747e-01],
# [ 9.30699172e-01, -2.02403943e-01],
# [ 9.67500451e-01, -1.94776055e-01],
# [ 1.00487103e+00, -1.86805380e-01],
# [ 1.04240543e+00, -1.78636750e-01],
# [ 1.07988993e+00, -1.70487743e-01],
# [ 1.11727083e+00, -1.62630883e-01],
# [ 1.15462291e+00, -1.55375840e-01],
# [ 1.19211769e+00, -1.49051637e-01],
# [ 1.22999184e+00, -1.43988851e-01],
# [ 1.26851553e+00, -1.40501812e-01],
# [ 1.30796077e+00, -1.38870811e-01],
# [ 1.34856976e+00, -1.39324302e-01],
# [ 1.39052328e+00, -1.42021101e-01],
# [ 1.43390901e+00, -1.47032590e-01]] )
#c2_pos = np.array([[ 2.29723909e+04 ,-2.11776812e+04],
# [ 2.26079583e+04, -2.08357257e+04],
# [ 2.22481613e+04, -2.04981931e+04],
# [ 2.18929556e+04, -2.01650405e+04],
# [ 2.15422971e+04, -1.98362252e+04],
# [ 2.11961420e+04, -1.95117048e+04],
# [ 2.08544469e+04, -1.91914371e+04],
# [ 2.05171687e+04, -1.88753804e+04],
# [ 2.01842643e+04, -1.85634930e+04],
# [ 1.98556911e+04, -1.82557336e+04],
# [ 1.95314069e+04, -1.79520612e+04],
# [ 1.92113695e+04, -1.76524350e+04],
# [ 1.88955370e+04, -1.73568146e+04],
# [ 1.85838681e+04, -1.70651598e+04],
# [ 1.82763213e+04, -1.67774306e+04],
# [ 1.79728558e+04, -1.64935872e+04],
# [ 1.76734308e+04, -1.62135904e+04],
# [ 1.73780059e+04, -1.59374010e+04],
# [ 1.70865409e+04, -1.56649801e+04],
# [ 1.67989960e+04, -1.53962890e+04],
# [ 1.65153314e+04, -1.51312895e+04],
# [ 1.62355079e+04, -1.48699434e+04],
# [ 1.59594862e+04, -1.46122130e+04],
# [ 1.56872277e+04, -1.43580606e+04],
# [ 1.54186937e+04, -1.41074490e+04],
# [ 1.51538460e+04, -1.38603412e+04],
# [ 1.48926464e+04, -1.36167002e+04],
# [ 1.46350573e+04, -1.33764897e+04],
# [ 1.43810410e+04, -1.31396734e+04],
# [ 1.41305604e+04, -1.29062152e+04],
# [ 1.38835785e+04, -1.26760794e+04],
# [ 1.36400585e+04, -1.24492304e+04],
# [ 1.33999639e+04, -1.22256331e+04],
# [ 1.31632586e+04, -1.20052524e+04],
# [ 1.29299065e+04, -1.17880536e+04],
# [ 1.26998720e+04, -1.15740022e+04],
# [ 1.24731195e+04, -1.13630640e+04],
# [ 1.22496139e+04, -1.11552049e+04],
# [ 1.20293203e+04, -1.09503912e+04],
# [ 1.18122039e+04, -1.07485894e+04],
# [ 1.15982303e+04, -1.05497663e+04],
# [ 1.13873653e+04, -1.03538888e+04],
# [ 1.11795750e+04, -1.01609241e+04],
# [ 1.09748255e+04, -9.97083985e+03],
# [ 1.07730836e+04, -9.78360361e+03],
# [ 1.05743159e+04, -9.59918339e+03],
# [ 1.03784896e+04, -9.41754739e+03],
# [ 1.01855718e+04, -9.23866406e+03],
# [ 9.99553013e+03, -9.06250206e+03],
# [ 9.80833234e+03, -8.88903032e+03],
# [ 9.62394644e+03, -8.71821800e+03],
# [ 9.44234067e+03, -8.55003447e+03],
# [ 9.26348351e+03, -8.38444937e+03],
# [ 9.08734370e+03, -8.22143256e+03],
# [ 8.91389019e+03, -8.06095412e+03],
# [ 8.74309219e+03, -7.90298438e+03],
# [ 8.57491913e+03, -7.74749390e+03],
# [ 8.40934068e+03, -7.59445347e+03],
# [ 8.24632675e+03, -7.44383410e+03],
# [ 8.08584747e+03, -7.29560704e+03],
# [ 7.92787323e+03, -7.14974375e+03],
# [ 7.77237461e+03, -7.00621595e+03],
# [ 7.61932246e+03, -6.86499556e+03],
# [ 7.46868783e+03, -6.72605473e+03],
# [ 7.32044202e+03, -6.58936583e+03],
# [ 7.17455655e+03, -6.45490146e+03],
# [ 7.03100316e+03, -6.32263445e+03],
# [ 6.88975383e+03, -6.19253784e+03],
# [ 6.75078075e+03, -6.06458490e+03],
# [ 6.61405634e+03, -5.93874910e+03],
# [ 6.47955326e+03, -5.81500415e+03],
# [ 6.34724435e+03, -5.69332397e+03],
# [ 6.21710273e+03, -5.57368269e+03],
# [ 6.08910169e+03, -5.45605468e+03],
# [ 5.96321476e+03, -5.34041450e+03],
# [ 5.83941569e+03, -5.22673694e+03],
# [ 5.71767845e+03, -5.11499698e+03],
# [ 5.59797723e+03, -5.00516984e+03],
# [ 5.48028640e+03, -4.89723095e+03],
# [ 5.36458061e+03, -4.79115592e+03],
# [ 5.25083466e+03, -4.68692061e+03],
# [ 5.13902360e+03, -4.58450107e+03],
# [ 5.02912269e+03, -4.48387354e+03],
# [ 4.92110739e+03, -4.38501451e+03],
# [ 4.81495338e+03, -4.28790063e+03],
# [ 4.71063654e+03 ,-4.19250879e+03],
# [ 4.60813297e+03 ,-4.09881607e+03],
# [ 4.50741897e+03 ,-4.00679974e+03],
# [ 4.40847105e+03 ,-3.91643731e+03],
# [ 4.31126592e+03 ,-3.82770646e+03],
# [ 4.21578051e+03, -3.74058508e+03],
# [ 4.12199194e+03, -3.65505125e+03],
# [ 4.02987754e+03, -3.57108327e+03],
# [ 3.93941484e+03, -3.48865963e+03],
# [ 3.85058157e+03, -3.40775900e+03],
# [ 3.76335566e+03, -3.32836028e+03],
# [ 3.67771525e+03, -3.25044252e+03],
# [ 3.59363868e+03, -3.17398501e+03],
# [ 3.51110446e+03, -3.09896721e+03],
# [ 3.43009133e+03, -3.02536877e+03],
# [ 3.35057820e+03, -2.95316954e+03],
# [ 3.27254420e+03, -2.88234956e+03],
# [ 3.19596864e+03, -2.81288906e+03],
# [ 3.12083103e+03, -2.74476845e+03],
# [ 3.04711106e+03, -2.67796835e+03],
# [ 2.97478861e+03, -2.61246954e+03],
# [ 2.90384379e+03, -2.54825301e+03],
# [ 2.83425684e+03, -2.48529992e+03],
# [ 2.76600823e+03, -2.42359161e+03],
# [ 2.69907862e+03, -2.36310963e+03],
# [ 2.63344882e+03, -2.30383568e+03],
# [ 2.56909987e+03, -2.24575167e+03],
# [ 2.50601296e+03, -2.18883967e+03],
# [ 2.44416950e+03, -2.13308194e+03],
# [ 2.38355104e+03, -2.07846092e+03],
# [ 2.32413935e+03, -2.02495922e+03],
# [ 2.26591637e+03, -1.97255964e+03],
# [ 2.20886421e+03, -1.92124515e+03],
# [ 2.15296516e+03, -1.87099888e+03],
# [ 2.09820172e+03, -1.82180417e+03],
# [ 2.04455652e+03, -1.77364449e+03],
# [ 1.99201241e+03, -1.72650353e+03],
# [ 1.94055239e+03, -1.68036510e+03],
# [ 1.89015965e+03, -1.63521324e+03],
# [ 1.84081754e+03, -1.59103210e+03],
# [ 1.79250959e+03, -1.54780605e+03],
# [ 1.74521951e+03, -1.50551959e+03],
# [ 1.69893117e+03, -1.46415740e+03],
# [ 1.65362862e+03, -1.42370435e+03],
# [ 1.60929607e+03, -1.38414544e+03],
# [ 1.56591792e+03, -1.34546585e+03],
# [ 1.52347870e+03, -1.30765093e+03],
# [ 1.48196315e+03, -1.27068618e+03],
# [ 1.44135615e+03, -1.23455727e+03],
# [ 1.40164275e+03, -1.19925003e+03],
# [ 1.36280816e+03, -1.16475045e+03],
# [ 1.32483777e+03, -1.13104468e+03],
# [ 1.28771712e+03, -1.09811902e+03],
# [ 1.25143191e+03, -1.06595994e+03],
# [ 1.21596800e+03, -1.03455405e+03],
# [ 1.18131143e+03, -1.00388814e+03],
# [ 1.14744836e+03, -9.73949142e+02],
# [ 1.11436516e+03, -9.44724131e+02],
# [ 1.08204830e+03, -9.16200347e+02],
# [ 1.05048446e+03, -8.88365180e+02],
# [ 1.01966043e+03, -8.61206171e+02],
# [ 9.89563188e+02, -8.34711010e+02],
# [ 9.60179845e+02, -8.08867538e+02],
# [ 9.31497673e+02, -7.83663742e+02],
# [ 9.03504096e+02, -7.59087759e+02],
# [ 8.76186686e+02, -7.35127870e+02],
# [ 8.49533166e+02, -7.11772503e+02],
# [ 8.23531408e+02, -6.89010232e+02],
# [ 7.98169434e+02, -6.66829772e+02],
# [ 7.73435409e+02, -6.45219983e+02],
# [ 7.49317648e+02, -6.24169866e+02],
# [ 7.25804610e+02, -6.03668564e+02],
# [ 7.02884898e+02, -5.83705359e+02],
# [ 6.80547259e+02, -5.64269673e+02],
# [ 6.58780584e+02, -5.45351068e+02],
# [ 6.37573902e+02, -5.26939240e+02],
# [ 6.16916388e+02, -5.09024025e+02],
# [ 5.96797353e+02, -4.91595392e+02],
# [ 5.77206247e+02, -4.74643447e+02],
# [ 5.58132662e+02, -4.58158429e+02],
# [ 5.39566322e+02, -4.42130708e+02],
# [ 5.21497092e+02, -4.26550790e+02],
# [ 5.03914969e+02, -4.11409310e+02],
# [ 4.86810086e+02, -3.96697032e+02],
# [ 4.70172710e+02, -3.82404852e+02],
# [ 4.53993239e+02, -3.68523792e+02],
# [ 4.38262205e+02, -3.55045005e+02],
# [ 4.22970269e+02, -3.41959766e+02],
# [ 4.08108223e+02, -3.29259479e+02],
# [ 3.93666988e+02, -3.16935673e+02],
# [ 3.79637612e+02, -3.04979998e+02],
# [ 3.66011271e+02, -2.93384231e+02],
# [ 3.52779269e+02, -2.82140269e+02],
# [ 3.39933032e+02, -2.71240128e+02],
# [ 3.27464114e+02, -2.60675950e+02],
# [ 3.15364191e+02, -2.50439990e+02],
# [ 3.03625061e+02, -2.40524627e+02],
# [ 2.92238644e+02, -2.30922355e+02],
# [ 2.81196983e+02, -2.21625783e+02],
# [ 2.70492239e+02, -2.12627640e+02],
# [ 2.60116692e+02, -2.03920767e+02],
# [ 2.50062741e+02, -1.95498118e+02],
# [ 2.40322902e+02, -1.87352765e+02],
# [ 2.30889808e+02, -1.79477886e+02],
# [ 2.21756206e+02, -1.71866774e+02],
# [ 2.12914959e+02, -1.64512833e+02],
# [ 2.04359043e+02, -1.57409574e+02],
# [ 1.96081546e+02, -1.50550617e+02],
# [ 1.88075670e+02, -1.43929692e+02],
# [ 1.80334726e+02, -1.37540632e+02],
# [ 1.72852135e+02, -1.31377380e+02],
# [ 1.65621429e+02, -1.25433981e+02],
# [ 1.58636246e+02, -1.19704586e+02],
# [ 1.51890332e+02, -1.14183446e+02],
# [ 1.45377541e+02, -1.08864918e+02],
# [ 1.39091830e+02, -1.03743458e+02],
# [ 1.33027262e+02, -9.88136241e+01],
# [ 1.27178004e+02, -9.40700721e+01],
# [ 1.21538324e+02, -8.95075577e+01],
# [ 1.16102595e+02, -8.51209339e+01],
# [ 1.10865287e+02, -8.09051505e+01],
# [ 1.05820973e+02, -7.68552534e+01],
# [ 1.00964325e+02, -7.29663834e+01],
# [ 9.62901114e+01, -6.92337754e+01],
# [ 9.17931994e+01, -6.56527576e+01],
# [ 8.74685524e+01, -6.22187504e+01],
# [ 8.33112291e+01, -5.89272656e+01],
# [ 7.93163830e+01, -5.57739055e+01],
# [ 7.54792612e+01, -5.27543622e+01],
# [ 7.17952038e+01, -4.98644162e+01],
# [ 6.82596424e+01, -4.70999358e+01],
# [ 6.48681001e+01, -4.44568765e+01],
# [ 6.16161897e+01, -4.19312794e+01],
# [ 5.84996134e+01, -3.95192708e+01],
# [ 5.55141615e+01, -3.72170614e+01],
# [ 5.26557120e+01, -3.50209447e+01],
# [ 4.99202289e+01, -3.29272970e+01],
# [ 4.73037622e+01, -3.09325757e+01],
# [ 4.48024463e+01, -2.90333192e+01],
# [ 4.24124993e+01, -2.72261450e+01],
# [ 4.01302224e+01, -2.55077498e+01],
# [ 3.79519985e+01, -2.38749078e+01],
# [ 3.58742916e+01, -2.23244705e+01],
# [ 3.38936458e+01, -2.08533650e+01],
# [ 3.20066846e+01, -1.94585940e+01],
# [ 3.02101094e+01, -1.81372340e+01],
# [ 2.85006995e+01, -1.68864351e+01],
# [ 2.68753103e+01, -1.57034196e+01],
# [ 2.53308731e+01, -1.45854816e+01],
# [ 2.38643935e+01, -1.35299856e+01],
# [ 2.24729513e+01, -1.25343658e+01],
# [ 2.11536989e+01, -1.15961252e+01],
# [ 1.99038608e+01, -1.07128348e+01],
# [ 1.87207324e+01, -9.88213264e+00],
# [ 1.76016795e+01, -9.10172262e+00],
# [ 1.65441368e+01, -8.36937399e+00],
# [ 1.55456078e+01, -7.68292025e+00],
# [ 1.46036630e+01, -7.04025827e+00],
# [ 1.37159396e+01, -6.43934740e+00],
# [ 1.28801405e+01, -5.87820856e+00],
# [ 1.20940333e+01, -5.35492333e+00],
# [ 1.13554492e+01, -4.86763304e+00],
# [ 1.06622825e+01, -4.41453791e+00],
# [ 1.00124896e+01, -3.99389609e+00],
# [ 9.40408770e+00, -3.60402278e+00],
# [ 8.83515437e+00, -3.24328934e+00],
# [ 8.30382642e+00, -2.91012235e+00],
# [ 7.80829904e+00, -2.60300275e+00],
# [ 7.34682486e+00, -2.32046491e+00],
# [ 6.91771309e+00, -2.06109571e+00],
# [ 6.51932861e+00, -1.82353369e+00],
# [ 6.15009100e+00, -1.60646808e+00],
# [ 5.80847372e+00, -1.40863794e+00],
# [ 5.49300316e+00, -1.22883126e+00],
# [ 5.20225772e+00, -1.06588402e+00],
# [ 4.93486694e+00, -9.18679317e-01],
# [ 4.68951057e+00, -7.86146441e-01],
# [ 4.46491766e+00, -6.67259991e-01],
# [ 4.25986569e+00, -5.61038955e-01],
# [ 4.07317961e+00, -4.66545814e-01],
# [ 3.90373098e+00, -3.82885634e-01],
# [ 3.75043702e+00, -3.09205166e-01],
# [ 3.61225976e+00, -2.44691937e-01],
# [ 3.48820508e+00, -1.88573353e-01],
# [ 3.37732184e+00, -1.40115788e-01],
# [ 3.27870095e+00, -9.86236828e-02],
# [ 3.19147448e+00, -6.34386435e-02],
# [ 3.11481474e+00, -3.39385341e-02],
# [ 3.04793339e+00, -9.53657391e-03],
# [ 2.99008052e+00,  1.03195661e-02],
# [ 2.94054376e+00,  2.61486678e-02],
# [ 2.89864733e+00,  3.84368696e-02],
# [ 2.86375121e+00,  4.76385703e-02],
# [ 2.83525016e+00,  5.41773332e-02],
# [ 2.81257286e+00,  5.84467901e-02],
# [ 2.79518096e+00,  6.08115450e-02],
# [ 2.78256825e+00,  6.16080782e-02],
# [ 2.77425966e+00,  6.11456501e-02],
# [ 2.76981042e+00,  5.97072055e-02],
# [ 2.76880513e+00,  5.75502772e-02],
# [ 2.77085685e+00,  5.49078899e-02],
# [ 2.77560621e+00,  5.19894645e-02],
# [ 2.78272049e+00,  4.89817216e-02],
# [ 2.79189271e+00,  4.60495859e-02],
# [ 2.80284075e+00,  4.33370896e-02],
# [ 2.81530640e+00,  4.09682770e-02],
# [ 2.82905451e+00,  3.90481079e-02],
# [ 2.84387202e+00,  3.76633616e-02],
# [ 2.85956711e+00,  3.68835414e-02],
# [ 2.87596826e+00,  3.67617776e-02],
# [ 2.89292336e+00,  3.73357323e-02],
# [ 2.91029880e+00,  3.86285029e-02],
# [ 2.92797854e+00,  4.06495261e-02],
# [ 2.94586325e+00,  4.33954820e-02],
# [ 2.96386938e+00,  4.68511979e-02],
# [ 2.98192823e+00,  5.09905521e-02],
# [ 2.99998509e+00,  5.57773783e-02],
# [ 3.01799830e+00,  6.11663689e-02],
# [ 3.03593835e+00,  6.71039796e-02],
# [ 3.05378699e+00,  7.35293329e-02],
# [ 3.07153630e+00,  8.03751221e-02],
# [ 3.08918780e+00,  8.75685156e-02],
# [ 3.10675155e+00,  9.50320603e-02],
# [ 3.12424521e+00,  1.02684586e-01],
# [ 3.14169318e+00,  1.10442109e-01],
# [ 3.15912566e+00,  1.18218736e-01],
# [ 3.17657775e+00,  1.25927568e-01],
# [ 3.19408855e+00,  1.33481606e-01],
# [ 3.21170027e+00,  1.40794652e-01],
# [ 3.22945728e+00,  1.47782214e-01],
# [ 3.24740524e+00,  1.54362412e-01],
# [ 3.26559019e+00,  1.60456879e-01],
# [ 3.28405762e+00,  1.65991666e-01],
# [ 3.30285161e+00,  1.70898146e-01],
# [ 3.32201385e+00,  1.75113920e-01],
# [ 3.34158283e+00,  1.78583717e-01],
# [ 3.36159284e+00,  1.81260300e-01],
# [ 3.38207313e+00,  1.83105371e-01],
# [ 3.40304696e+00,  1.84090474e-01],
# [ 3.42453074e+00,  1.84197897e-01],
# [ 3.44653307e+00,  1.83421578e-01],
# [ 3.46905389e+00,  1.81768012e-01],
# [ 3.49208351e+00,  1.79257147e-01],
# [ 3.51560176e+00,  1.75923295e-01],
# [ 3.53957706e+00,  1.71816033e-01],
# [ 3.56396552e+00,  1.67001108e-01]])

c1_pos = np.array([[ 2.22374142e+00, -3.79893641e-03],
 [ 1.63769408e+00,  3.30800844e-02],
 [ 1.07068519e+00, -2.75612004e-02],
 [ 6.65643282e-01, -1.51545069e-01],
 [ 7.94652784e-02, -2.07459981e-01],
 [-2.18877129e-01, -2.38952966e-01],
 [-8.13397358e-01, -2.63592846e-01],
 [-1.38573766e+00, -3.71340052e-01],
 [-1.96368019e+00, -5.18964665e-01],
 [-2.37448779e+00, -4.63992759e-01],
 [-2.96652200e+00, -5.43226038e-01],
 [-3.54476297e+00, -3.99039045e-01],
 [-3.86796226e+00, -2.06865596e-01],
 [-4.45580315e+00, -1.74883870e-01],
 [-4.99744705e+00, -7.54591859e-08]])
c2_pos = np.array([[ 4.09344206e+00, -1.75239803e-01],
 [ 3.79392378e+00, -1.58245731e-01],
 [ 3.20005712e+00, -1.61349176e-01],
 [ 2.61035169e+00, -2.22532707e-01],
 [ 2.07353467e+00, -1.28643557e-01],
 [ 1.77660251e+00, -8.58499525e-02],
 [ 1.19250716e+00,  2.99515409e-02],
 [ 5.94109720e-01,  6.82018614e-02],
 [-5.42762556e-03,  5.20939999e-02],
 [-6.03895385e-01,  6.63778575e-02],
 [-1.20257923e+00,  7.74802401e-02],
 [-1.80084216e+00,  6.52300186e-02],
 [-2.39992338e+00,  3.78900126e-02],
 [-2.99872352e+00,  1.88647965e-08]])

# reverse order of waypoints as they're backwards
c1_pos = np.flip(c1_pos, 0)
c2_pos = np.flip(c2_pos, 0)



time_step = 0.02

c1_speed = 5.0
c2_speed = 2.5
trajSmooth_1 = TrajectorySmoothing(c1_pos, c1_speed)
trajSmooth_2 = TrajectorySmoothing(c2_pos, c2_speed)

# set max time
max_time = int(max(trajSmooth_1.total_time, trajSmooth_2.total_time))

# set car1 velocity profile waypoints
# [time, percent along path]
c1_vel = np.array([[0, 0],
                  [trajSmooth_1.total_time,1]])
c2_vel = np.array([[0,0],
                  [trajSmooth_2.total_time,1]])
    
c1_traj = PathTrajectory(trajSmooth_1.get_total_path(time_step), c1_vel)

# arrays for plotting
vec_plan_space = []
real_space_path_c1 = []
real_space_path_c2 = []
real_space_collided = []
min_obstacle = []
max_obstacle = []

# iterate thru time
for t in np.arange(0.0, max_time, time_step):
    
    curr_c1_pos = c1_traj.update(t)

    found_collision = []
    
    trajSmooth_2 = TrajectorySmoothing(c2_pos, c2_speed)
    c2_traj = PathTrajectory(trajSmooth_2.get_total_path(time_step), c2_vel)

    for t2 in np.arange(0.0, max_time, time_step):
        curr_c2_pos = c2_traj.update(t2)

        # calculate if the two cars collide
        if (np.linalg.norm(curr_c1_pos - curr_c2_pos) < 1):

            # add collision points to array for plotting
            real_space_collided.append(curr_c1_pos)
            real_space_collided.append(curr_c2_pos)

            # if they collide, then find the time parameterized value along the path
            # that corresponds to this time
            s = c2_traj.s

            # append to array for plotting
            vec_plan_space.append([t, s])
            found_collision.append(s)
        else:
            # if they don't collide, just add them to the real space path for plotting
            real_space_path_c1.append(curr_c1_pos)
            real_space_path_c2.append(curr_c2_pos)

    if len(found_collision) > 0:
        found_collision = np.array(found_collision)
        min_obstacle.append(found_collision[0])
        max_obstacle.append(found_collision[-1])
    else:
        min_obstacle.append(None)
        max_obstacle.append(None)

# convert to numpy arrays
vec_plan_space = np.array(vec_plan_space)
real_space_path_c1 = np.array(real_space_path_c1)
real_space_path_c2 = np.array(real_space_path_c2)
real_space_collided = np.array(real_space_collided)

n = int(max_time*1/time_step)
s = cp.Variable(n, nonneg=True)
y = cp.Variable(n, integer=True)

M = float(max_time*1/time_step)
constraints = [
    s[0] == 0.0,
    s <= np.ones(n),
    y >= np.zeros(n),
    y <= np.ones(n)
]
for i in range(n - 1):
    constraints += [s[i] - s[i + 1] <= 0, s[i + 1] - s[i] <= time_step/max_time]

for i in range(len(min_obstacle)):
    if min_obstacle[i] != None:
        constraints += [max_obstacle[i] - s[i] <= M * (1 - y[i]), s[i] - min_obstacle[i] <= M * y[i]]

objective = cp.Maximize(cp.sum(s))
prob = cp.Problem(objective,
                  constraints)
current_time = time.time()
prob.solve()
end_time = time.time()
print(end_time - current_time)

# time-s figure
if len(vec_plan_space) > 0:
    plt.figure(1)
    plt.plot(vec_plan_space[:, 0], vec_plan_space[:, 1], 'b.')
    plt.plot(np.arange(0, float(max_time), time_step), s.value)
    plt.axis([0, max_time, 0, 1])
    plt.xlabel('Time (sec)')
    plt.ylabel('Percent Along Path')
    plt.title('Velocity Planning Obstacles for Car 2')
    plt.show()
else:
    print("No collisions along path")

# path figure
plt.figure(2)
plt.xlabel('X')
plt.ylabel('Y')
plt.axis([-10, 10, -6, 6])
plt.title('Car 1 and Car 2 Paths')
plt.plot(real_space_path_c1[:, 0], real_space_path_c1[:, 1], 'g.', label="car 1 path")
plt.plot(real_space_path_c2[:, 0], real_space_path_c2[:, 1], 'b.', label="car 2 path")
plt.plot(real_space_collided[:, 0], real_space_collided[:, 1], 'r.', label='collision')
plt.plot(real_space_path_c1[0,0], real_space_path_c1[0,1], 'ko', label="start")
plt.plot(real_space_path_c2[0,0], real_space_path_c2[0,1], 'ko', label="start")
plt.plot(real_space_path_c1[-1,0], real_space_path_c1[-1,1], 'kx', label="end")
plt.plot(real_space_path_c2[-1,0], real_space_path_c2[-1,1], 'kx', label="end")
plt.legend(loc="upper right")
plt.show()

# animation figure
fig, ax = plt.subplots()
ax.axis([-10, 10, -6, 6])
ax.set_aspect("equal")

# set the objects, markersize of 42.28 roughly equals radius = 0.5 w/ [0,6] axis limits
point, = ax.plot(0, 1, marker="o", markersize=10.28)
point2, = ax.plot(0, 1, marker="o", markersize=10.28)

# calc path vectors
c2_fxn = np.array(c2_pos[1] - c2_pos[0])

# set waypoints in time-s space to follow
s_2 = np.array(s.value).reshape((n, 1))
t_2 = np.arange(0, max_time, time_step).reshape((n, 1))
time_fxn_2 = np.hstack((t_2, s_2))

trajSmooth_1 = TrajectorySmoothing(c1_pos, c1_speed)
trajSmooth_2 = TrajectorySmoothing(c2_pos, c2_speed)
c1_traj = PathTrajectory(trajSmooth_1.get_total_path(time_step), c1_vel)
c2_traj = PathTrajectory(trajSmooth_2.get_total_path(time_step), time_fxn_2)

def line(t):
    global c1_traj
    return np.array(c1_traj.update(t))

# animation function for car 2
def line2(t):
    global c2_traj
    return np.array(c2_traj.update(t))

# used for running the animation function


def update(t):

    # get x,y positions of each car at time t
    x, y = line(t)
    list1 = [[x], [y]]
    x, y = line2(t)
    list2 = [[x], [y]]

    point.set_data(list1[0], list1[1])
    point2.set_data(list2[0], list2[1])
    point.set_label('Car 1')
    point2.set_label('Car 2')
    plt.legend(loc="upper right")
    return [point, point2]


ani = FuncAnimation(fig, update, interval=50, repeat=False,
                    frames=np.linspace(0, max_time, n, endpoint=False))
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Cars Avoiding Collision')

plt.show()
